
/*
The caching feature was introduced in SQL Server 2005.
This functionality provides the caching of temporary objects(temp tables, table variables, and TVFs) across repeated calls of routines(Stored procedures, triggers, and UDFs).
In short, When a stored procedure execution ends,
SQL Server truncates* and renames the table, keeping only one IAM and one data page. 
The structure will be used by the subsequent calls instead of allocating new pages 
from scratch when the object is created again.

For the temp objects smaller than 8MB, the truncation happens immediately after module execution ends. 
For the larger temp objects, SQL Serer performs “deferred drop” and immediately returns control to the application


Temp table caching-
1. CREATE TABLE 
2. SELECT INTO statements
3. UPDATE STATISTICS

NO Caching -
1.explicit DDL on a temp table after it is created i.e ALTER
2.#temp - ADD Constraint
3.CREATE STATISTICS on table colums 
4.there is a named constraint on a temp table
5.Part of Dynamic sql
6.Part of adhoc workloads

*/

--If a stored procedure is executed concurrently, multiple separate cached objects may be created in tempdb. 
--There is a cached temp object per execution context.
--CACHE STORE FOR TEMP TABLES
SELECT  mcc.[name],
        mcc.[type],
        mcc.pages_kb,
        mcc.pages_in_use_kb,
        mcc.entries_count,
        mcc.entries_in_use_count
FROM sys.dm_os_memory_cache_counters AS mcc
WHERE mcc.[type] = N'CACHESTORE_TEMPTABLES'

--Recompile Reasons
SELECT xemv.map_key,
       xemv.map_value
FROM sys.dm_xe_map_values AS xemv
WHERE xemv.name = N'statement_recompile_cause'
ORDER BY xemv.map_key;

--HOW TO RECOMPILE
--WHILE EXECUTING SPROC - EXECUTE <MY_SP>.. WITH RECOMPILE
--AT STATEMENT LEVEL -  OPTION(RECOMPILE) 
-- IN SPROC DEFINITION - WITH RECOMPLILE..AS BEGIN

/*
Recompilation reasons
=====================
Changes made to a table or view referenced by the query (ALTER TABLE and ALTER VIEW).
Changes made to a single procedure, which would drop all plans for that procedure from the cache (ALTER PROCEDURE).
Changes to any indexes used by the execution plan.
Updates on statistics used by the execution plan, generated either explicitly from a statement, such as UPDATE STATISTICS, or generated automatically.
Dropping an index used by the execution plan.
An explicit call to sp_recompile.
Large numbers of changes to keys (generated by INSERT or DELETE statements from other users that modify a table referenced by the query).
For tables with triggers, if the number of rows in the inserted or deleted tables grows significantly.
Executing a stored procedure using the WITH RECOMPILE option.
*/

--Recompile thresholds 
 --threshold crossing test - cardinality(current) – cardinality(snapshot) |  >= RT
--Recompilation can occur due to statistics update
--Automatically created statistics are cached along with the cached temp tables.
--In this case,  auto-created statistics are NOT reset at the end of the stored procedure execution
-- cycle nor at the beginning of a consecutive stored proc. execution.
/*
Table cardinality	Recompile Threshold	   Passing RT test caridnality
-----------------   -------------------    ---------------------------
n<6	                6	                   >= (n+6)
6 <= n <= 500	    500	                   >= (n+500)
n > 500	            500 +0.20*n	           >= (n +500 +0.20*n)
*/